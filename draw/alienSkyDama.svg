<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="150"
   height="150"
   viewBox="0 0 39.687501 39.687501"
   version="1.1"
   id="svg5"
   inkscape:version="1.1.2 (b8e25be833, 2022-02-05)"
   sodipodi:docname="alienSkyDama.svg"
   inkscape:label="dama"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:ns1="https://launchpad.net/jessyink">
  <sodipodi:namedview
     id="namedview7"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:pageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:document-units="px"
     showgrid="true"
     units="px"
     width="512px"
     inkscape:zoom="2.47"
     inkscape:cx="120.24291"
     inkscape:cy="72.672065"
     inkscape:window-width="1920"
     inkscape:window-height="1001"
     inkscape:window-x="-9"
     inkscape:window-y="-9"
     inkscape:window-maximized="1"
     inkscape:current-layer="g1349"
     inkscape:snap-global="false">
    <inkscape:grid
       type="xygrid"
       id="grid939"
       spacingx="0.26458334"
       spacingy="0.26458334" />
  </sodipodi:namedview>
  <defs
     id="defs2">
    <filter
       style="color-interpolation-filters:sRGB;"
       inkscape:label="Drop Shadow"
       id="filter14157"
       x="-0.061523112"
       y="-0.074902389"
       width="1.4181865"
       height="1.15756">
      <feFlood
         flood-opacity="0.498039"
         flood-color="rgb(0,0,0)"
         result="flood"
         id="feFlood14147" />
      <feComposite
         in="flood"
         in2="SourceGraphic"
         operator="in"
         result="composite1"
         id="feComposite14149" />
      <feGaussianBlur
         in="composite1"
         stdDeviation="1.82371"
         result="blur"
         id="feGaussianBlur14151" />
      <feOffset
         dx="20.997"
         dy="0.453172"
         result="offset"
         id="feOffset14153" />
      <feComposite
         in="SourceGraphic"
         in2="offset"
         operator="over"
         result="composite2"
         id="feComposite14155" />
    </filter>
  </defs>
  <g
     id="layer2"
     inkscape:label="master"
     ns1:masterSlide="masterSlide"
     style="display:inline" />
  <g
     inkscape:label="dama"
     id="layer1-23"
     style="display:none;fill:#008080;fill-opacity:1"
     inkscape:groupmode="layer">
    <g
       id="g4973-3-7"
       inkscape:label="pedina1"
       style="display:inline;fill:#008080;fill-opacity:1"
       transform="translate(6.5171902,8.7794035)">
      <path
         style="display:inline;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         d="m 2.7432267,11.064347 c 0,0 -0.4164513,2.640186 0.1828813,4.238475 0.9030892,2.408342 6.6269589,5.001722 9.921336,5.291667 5.475824,0.481938 8.242921,-0.901092 9.921336,-3.175 0.997045,-1.350791 0.137162,-6.263701 0.137162,-6.263701 v 0 0"
         id="path4971-6-5"
         sodipodi:nodetypes="csssccc"
         inkscape:label="border" />
      <path
         id="path4969-3-3"
         style="display:inline;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:80;paint-order:stroke fill markers;stop-color:#000000"
         d="m 22.448737,11.110066 c -0.276912,1.179977 -1.196764,6.461007 -9.669873,5.898748 C 7.4500588,16.655205 3.137111,12.321774 3.1089907,11.110066 3.0286687,7.6489976 7.4383412,5.7404851 12.778864,5.7404851 c 5.340523,0 10.312453,2.6314165 9.669873,5.3695809 z"
         inkscape:label="circle"
         sodipodi:nodetypes="sssss" />
    </g>
    <g
       id="g4973-3-7-0-6"
       inkscape:label="pedina1"
       style="display:inline;fill:#008080;fill-opacity:1;stroke:#008000"
       transform="translate(4.8033469,4.7649344)">
      <path
         style="display:inline;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         d="m 2.7432267,11.064347 c 0,0 -0.4164513,2.640186 0.1828813,4.238475 0.9030892,2.408342 6.6269589,5.001722 9.921336,5.291667 5.475824,0.481938 8.242921,-0.901092 9.921336,-3.175 0.997045,-1.350791 0.137162,-6.263701 0.137162,-6.263701 v 0 0"
         id="path4971-6-5-8-9"
         sodipodi:nodetypes="csssccc"
         inkscape:label="border" />
      <path
         id="path4969-3-3-5-2"
         style="display:inline;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:80;paint-order:stroke fill markers;stop-color:#000000"
         d="m 22.448737,11.110066 c -0.276912,1.179977 -1.196764,6.461007 -9.669873,5.898748 C 7.4500588,16.655205 3.137111,12.321774 3.1089907,11.110066 3.0286687,7.6489976 7.4383412,5.7404851 12.778864,5.7404851 c 5.340523,0 10.312453,2.6314165 9.669873,5.3695809 z"
         inkscape:label="circle"
         sodipodi:nodetypes="sssss" />
    </g>
  </g>
  <g
     inkscape:label="dama astronave"
     id="layer1"
     style="display:none;fill:#003f3f;fill-opacity:1"
     inkscape:groupmode="layer">
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 14.169937,12.770631 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315187 l -3.401284,-1.855246"
       id="path48923-3"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-3" />
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 25.084205,12.586245 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315202 L 21.497396,4.2994791"
       id="path48923-9"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-9" />
    <g
       id="g4973-3-7-0"
       inkscape:label="pedina1"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="translate(7.1885412,2.8269641)">
      <path
         style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1"
         d="m 2.7432267,11.064347 c 0,0 -9.2919737,0.959862 -6.0037164,9.679699 2.2399344,5.939883 7.7450188,8.355902 16.1079337,8.720384 5.491778,0.239349 15.437361,-2.382818 16.77877,-8.392612 2.022847,-9.062784 -6.720272,-9.91603 -6.720272,-9.91603"
         id="path4971-6-5-8"
         sodipodi:nodetypes="csssc"
         inkscape:label="border" />
      <path
         id="path4971-6-5-8-8"
         style="font-variation-settings:normal;display:inline;vector-effect:none;fill:#003f3f;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000"
         inkscape:label="border"
         d="m 22.638605,21.966108 c -0.824212,3.692633 -4.897247,6.104506 -9.189105,7.361309 5.612316,-0.05866 14.60748,-2.709694 15.878618,-8.404656 2.022845,-9.062784 -6.72052,-9.916191 -6.72052,-9.916191 -47.137881,0.574639 2.719768,-3.4289761 0.03101,10.959538 z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path4969-3-3-5"
         style="display:inline;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:80;paint-order:stroke fill markers;stop-color:#000000"
         d="M 25.281155,14.464245 C 25.004243,15.644222 20.655674,20.70164 12.182565,20.139381 6.8537602,19.785772 -0.66429238,15.452341 -0.69241268,14.240633 -0.77273468,10.779565 6.8420426,8.8710526 12.182565,8.8710526 c 5.340523,0 13.74117,2.8550284 13.09859,5.5931924 z"
         inkscape:label="circle"
         sodipodi:nodetypes="sssss" />
    </g>
    <g
       id="g6351-9-9"
       inkscape:label="lasseer"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="matrix(1.5455405,-0.3997359,0.3219175,1.2446632,15.328212,5.061881)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path4617-14-8"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path4617-6-4-1"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path4617-3-5-4"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path4617-36-5-6"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path4617-1-5-5"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path5975-8-8" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path5977-2-8" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path5979-2-0" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path5981-6-7"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path5983-9-8" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="path6178-8-2"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <g
       id="g981-2"
       inkscape:label="cupola"
       transform="matrix(0.33850583,0,0,0.36048359,3.1066983,-0.38127005)">
      <path
         id="path5450-7"
         style="display:inline;fill:#00ffff;stroke:none;stroke-width:1.998;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 51.015994,22.653103 c -12.133509,0.03468 -22.88706,10.276717 -26.690727,25.421101 0,0 17.169027,6.445659 25.918814,6.445659 9.063819,0 27.522003,-6.445659 27.522003,-6.445659 C 73.955544,32.902575 63.171365,22.654173 51.015994,22.653103 Z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path5450-0-2"
         style="display:inline;opacity:0.198962;fill:#000000;stroke:none;stroke-width:1.99847;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 56.953175,23.172993 c 3.048591,4.144697 4.692141,9.144428 4.693359,14.277344 -0.0066,3.567665 -0.145854,13.370179 -1.682657,16.594838 L 77.766084,48.074204 C 74.588171,35.421379 66.582016,25.889147 56.953175,23.172993 Z"
         sodipodi:nodetypes="ccccc" />
    </g>
    <g
       id="g6351-9"
       inkscape:label="lasseer"
       style="display:inline"
       transform="matrix(1.5963973,0,0,1.2856194,1.1486306,3.1113582)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path4617-14"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path4617-6-4"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path4617-3-5"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path4617-36-5"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path4617-1-5"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path5975-8" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path5977-2" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path5979-2" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path5981-6"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path5983-9" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="path6178-8"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <path
       style="fill:none;stroke:#008000;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 3.3206815,21.745109 C 14.603858,28.943952 25.887034,28.073351 37.17021,20.995277"
       id="path1049"
       sodipodi:nodetypes="cc"
       inkscape:label="divisorio" />
  </g>
  <g
     inkscape:label="dama astronave laser 1"
     id="g1085"
     style="display:none;fill:#003f3f;fill-opacity:1"
     inkscape:groupmode="layer">
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 14.169937,12.770631 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315187 l -3.401284,-1.855246"
       id="path1017"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-3" />
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 25.084205,12.586245 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315202 L 21.497396,4.2994791"
       id="path1019"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-9" />
    <g
       id="g1027"
       inkscape:label="pedina1"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="translate(7.1885412,2.8269641)">
      <path
         style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1"
         d="m 2.7432267,11.064347 c 0,0 -9.2919737,0.959862 -6.0037164,9.679699 2.2399344,5.939883 7.7450188,8.355902 16.1079337,8.720384 5.491778,0.239349 15.437361,-2.382818 16.77877,-8.392612 2.022847,-9.062784 -6.720272,-9.91603 -6.720272,-9.91603"
         id="path1021"
         sodipodi:nodetypes="csssc"
         inkscape:label="border" />
      <path
         id="path1023"
         style="font-variation-settings:normal;display:inline;vector-effect:none;fill:#003f3f;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000"
         inkscape:label="border"
         d="m 22.638605,21.966108 c -0.824212,3.692633 -4.897247,6.104506 -9.189105,7.361309 5.612316,-0.05866 14.60748,-2.709694 15.878618,-8.404656 2.022845,-9.062784 -6.72052,-9.916191 -6.72052,-9.916191 -47.137881,0.574639 2.719768,-3.4289761 0.03101,10.959538 z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path1025"
         style="display:inline;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:80;paint-order:stroke fill markers;stop-color:#000000"
         d="M 25.281155,14.464245 C 25.004243,15.644222 20.655674,20.70164 12.182565,20.139381 6.8537602,19.785772 -0.66429238,15.452341 -0.69241268,14.240633 -0.77273468,10.779565 6.8420426,8.8710526 12.182565,8.8710526 c 5.340523,0 13.74117,2.8550284 13.09859,5.5931924 z"
         inkscape:label="circle"
         sodipodi:nodetypes="sssss" />
    </g>
    <g
       id="g1051"
       inkscape:label="lasseer"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="matrix(1.5455405,-0.3997359,0.3219175,1.2446632,15.328212,5.061881)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path1029"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path1031"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path1033"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path1035"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path1037"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path1039" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path1041" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path1043" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path1045"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path1047" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="ellipse1049"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <g
       id="g1057"
       inkscape:label="cupola"
       transform="matrix(0.33850583,0,0,0.36048359,3.1066983,-0.38127005)">
      <path
         id="path1053"
         style="display:inline;fill:#00ffff;stroke:none;stroke-width:1.998;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 51.015994,22.653103 c -12.133509,0.03468 -22.88706,10.276717 -26.690727,25.421101 0,0 17.169027,6.445659 25.918814,6.445659 9.063819,0 27.522003,-6.445659 27.522003,-6.445659 C 73.955544,32.902575 63.171365,22.654173 51.015994,22.653103 Z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path1055"
         style="display:inline;opacity:0.198962;fill:#000000;stroke:none;stroke-width:1.99847;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 56.953175,23.172993 c 3.048591,4.144697 4.692141,9.144428 4.693359,14.277344 -0.0066,3.567665 -0.145854,13.370179 -1.682657,16.594838 L 77.766084,48.074204 C 74.588171,35.421379 66.582016,25.889147 56.953175,23.172993 Z"
         sodipodi:nodetypes="ccccc" />
    </g>
    <g
       id="g1081"
       inkscape:label="lasseer"
       style="display:inline"
       transform="matrix(1.5963973,0,0,1.2856194,1.1486306,3.1113582)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path1059"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path1061"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path1063"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path1065"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path1067"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path1069" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path1071" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path1073" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path1075"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path1077" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="ellipse1079"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <path
       style="fill:none;stroke:#008000;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 3.3206815,21.745109 C 14.603858,28.943952 25.887034,28.073351 37.17021,20.995277"
       id="path1083"
       sodipodi:nodetypes="cc"
       inkscape:label="divisorio" />
    <path
       style="fill:none;stroke:#ff00ff;stroke-width:1.05833;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 32.349866,18.852902 -0.749831,3.4278 -2.035257,-5.248819 -0.85695,5.141701 -1.928138,-5.034582 -1.392544,5.355938 -1.285425,-6.212888 -0.642712,3.856275 -1.178307,-4.28475 -1.7139,6.8556 -2.677969,-4.713225 -2.249494,4.070513 -1.606781,-1.821019"
       id="path1120"
       inkscape:label="laserray" />
  </g>
  <g
     inkscape:label="dama astronave laser 1 copia"
     id="g3028"
     style="display:none;fill:#003f3f;fill-opacity:1"
     inkscape:groupmode="layer">
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 14.169937,12.770631 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315187 l -3.401284,-1.855246"
       id="path2958"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-3" />
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 25.084205,12.586245 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315202 L 21.497396,4.2994791"
       id="path2960"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-9" />
    <g
       id="g2968"
       inkscape:label="pedina1"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="translate(7.1885412,2.8269641)">
      <path
         style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1"
         d="m 2.7432267,11.064347 c 0,0 -9.2919737,0.959862 -6.0037164,9.679699 2.2399344,5.939883 7.7450188,8.355902 16.1079337,8.720384 5.491778,0.239349 15.437361,-2.382818 16.77877,-8.392612 2.022847,-9.062784 -6.720272,-9.91603 -6.720272,-9.91603"
         id="path2962"
         sodipodi:nodetypes="csssc"
         inkscape:label="border" />
      <path
         id="path2964"
         style="font-variation-settings:normal;display:inline;vector-effect:none;fill:#003f3f;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000"
         inkscape:label="border"
         d="m 22.638605,21.966108 c -0.824212,3.692633 -4.897247,6.104506 -9.189105,7.361309 5.612316,-0.05866 14.60748,-2.709694 15.878618,-8.404656 2.022845,-9.062784 -6.72052,-9.916191 -6.72052,-9.916191 -47.137881,0.574639 2.719768,-3.4289761 0.03101,10.959538 z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path2966"
         style="display:inline;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:80;paint-order:stroke fill markers;stop-color:#000000"
         d="M 25.281155,14.464245 C 25.004243,15.644222 20.655674,20.70164 12.182565,20.139381 6.8537602,19.785772 -0.66429238,15.452341 -0.69241268,14.240633 -0.77273468,10.779565 6.8420426,8.8710526 12.182565,8.8710526 c 5.340523,0 13.74117,2.8550284 13.09859,5.5931924 z"
         inkscape:label="circle"
         sodipodi:nodetypes="sssss" />
    </g>
    <g
       id="g2992"
       inkscape:label="lasseer"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="matrix(1.5455405,-0.3997359,0.3219175,1.2446632,15.328212,5.061881)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path2970"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path2972"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path2974"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path2976"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path2978"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path2980" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path2982" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path2984" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path2986"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path2988" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="ellipse2990"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <g
       id="g2998"
       inkscape:label="cupola"
       transform="matrix(0.33850583,0,0,0.36048359,3.1066983,-0.38127005)">
      <path
         id="path2994"
         style="display:inline;fill:#00ffff;stroke:none;stroke-width:1.998;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 51.015994,22.653103 c -12.133509,0.03468 -22.88706,10.276717 -26.690727,25.421101 0,0 17.169027,6.445659 25.918814,6.445659 9.063819,0 27.522003,-6.445659 27.522003,-6.445659 C 73.955544,32.902575 63.171365,22.654173 51.015994,22.653103 Z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path2996"
         style="display:inline;opacity:0.198962;fill:#000000;stroke:none;stroke-width:1.99847;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 56.953175,23.172993 c 3.048591,4.144697 4.692141,9.144428 4.693359,14.277344 -0.0066,3.567665 -0.145854,13.370179 -1.682657,16.594838 L 77.766084,48.074204 C 74.588171,35.421379 66.582016,25.889147 56.953175,23.172993 Z"
         sodipodi:nodetypes="ccccc" />
    </g>
    <g
       id="g3022"
       inkscape:label="lasseer"
       style="display:inline"
       transform="matrix(1.5963973,0,0,1.2856194,1.1486306,3.1113582)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path3000"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path3002"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path3004"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path3006"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path3008"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path3010" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path3012" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path3014" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path3016"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path3018" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="ellipse3020"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <path
       style="fill:none;stroke:#008000;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 3.3206815,21.745109 C 14.603858,28.943952 25.887034,28.073351 37.17021,20.995277"
       id="path3024"
       sodipodi:nodetypes="cc"
       inkscape:label="divisorio" />
    <path
       style="fill:none;stroke:#ff00ff;stroke-width:1.05833;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 36.099023,15.53222 -3.856275,3.856275 -2.67797,-4.606106 -0.85695,7.391195 -0.85695,-2.999326 -2.463732,3.320682 -2.999325,-5.248819 -1.928137,2.892206 -1.606782,-3.4278 -4.713226,4.498987 -5.8915315,-1.928137 -0.6427126,2.785088 -4.8203438,-3.213563"
       id="path3026"
       inkscape:label="laserray"
       sodipodi:nodetypes="ccccccccccccc" />
    <path
       style="display:inline;fill:none;fill-opacity:1;stroke:#ff00ff;stroke-width:1.05833;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 36.688175,15.194248 -1.928137,14.032558 -3.427801,3.4278 -3.106444,-1.713901 -0.85695,2.999326 -2.463732,-3.320682 -2.999325,5.248819 -1.928137,-2.892206 -1.606782,3.4278 -4.820345,-3.213562 -2.142374,-5.141701 -4.4989886,3.4278 -4.4989878,-12.425776"
       id="path3026-3"
       inkscape:label="laserray"
       sodipodi:nodetypes="ccccccccccccc" />
    <g
       id="g37717"
       style="display:inline;opacity:0.586987;fill:#ff00ff;fill-opacity:1"
       transform="matrix(0.97889579,0,0,0.98654633,0.10393842,0.00707562)">
      <path
         id="path4410"
         style="display:inline;fill:#ff00ff;fill-opacity:1;stroke:#ff00ff;stroke-width:1.05833;stroke-linecap:round;stroke-dashoffset:302.362;paint-order:stroke markers fill;stop-color:#000000"
         d="M 37.705803,20.406124 A 17.567476,17.192562 0 0 1 20.138327,37.598686 17.567476,17.192562 0 0 1 2.5708504,20.406124 17.567476,17.192562 0 0 1 20.138327,3.213562 17.567476,17.192562 0 0 1 37.705803,20.406124 Z" />
      <text
         xml:space="preserve"
         style="font-size:3.175px;line-height:1.25;font-family:sans-serif;display:inline;fill:#ff00ff;fill-opacity:1;stroke-width:0.264583"
         id="text5688"><textPath
           xlink:href="#path4410"
           id="textPath35760"><tspan
             id="tspan5686"
             style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Jokerman;-inkscape-font-specification:Jokerman;fill:#ff00ff;fill-opacity:1;stroke-width:0.264583">MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</tspan></textPath></text>
    </g>
  </g>
  <g
     inkscape:label="dama astronave laser 1 copia copia"
     id="g1349"
     style="display:inline;fill:#003f3f;fill-opacity:1"
     inkscape:groupmode="layer">
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 14.169937,12.770631 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315187 l -3.401284,-1.855246"
       id="path1267"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-3" />
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 25.084205,12.586245 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315202 L 21.497396,4.2994791"
       id="path1269"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-9" />
    <g
       id="g1277"
       inkscape:label="pedina1"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="translate(7.1885412,2.8269641)">
      <path
         style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1"
         d="m 2.7432267,11.064347 c 0,0 -9.2919737,0.959862 -6.0037164,9.679699 2.2399344,5.939883 7.7450188,8.355902 16.1079337,8.720384 5.491778,0.239349 15.437361,-2.382818 16.77877,-8.392612 2.022847,-9.062784 -6.720272,-9.91603 -6.720272,-9.91603"
         id="path1271"
         sodipodi:nodetypes="csssc"
         inkscape:label="border" />
      <path
         id="path1273"
         style="font-variation-settings:normal;display:inline;vector-effect:none;fill:#003f3f;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000"
         inkscape:label="border"
         d="m 22.638605,21.966108 c -0.824212,3.692633 -4.897247,6.104506 -9.189105,7.361309 5.612316,-0.05866 14.60748,-2.709694 15.878618,-8.404656 2.022845,-9.062784 -6.72052,-9.916191 -6.72052,-9.916191 -47.137881,0.574639 2.719768,-3.4289761 0.03101,10.959538 z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path1275"
         style="display:inline;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:80;paint-order:stroke fill markers;stop-color:#000000"
         d="M 25.281155,14.464245 C 25.004243,15.644222 20.655674,20.70164 12.182565,20.139381 6.8537602,19.785772 -0.66429238,15.452341 -0.69241268,14.240633 -0.77273468,10.779565 6.8420426,8.8710526 12.182565,8.8710526 c 5.340523,0 13.74117,2.8550284 13.09859,5.5931924 z"
         inkscape:label="circle"
         sodipodi:nodetypes="sssss" />
    </g>
    <g
       id="g1301"
       inkscape:label="lasseer"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="matrix(1.5455405,-0.3997359,0.3219175,1.2446632,15.328212,5.061881)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path1279"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path1281"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path1283"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path1285"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path1287"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path1289" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path1291" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path1293" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path1295"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path1297" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="ellipse1299"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <g
       id="g1307"
       inkscape:label="cupola"
       transform="matrix(0.33850583,0,0,0.36048359,3.1066983,-0.38127005)">
      <path
         id="path1303"
         style="display:inline;fill:#00ffff;stroke:none;stroke-width:1.998;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 51.015994,22.653103 c -12.133509,0.03468 -22.88706,10.276717 -26.690727,25.421101 0,0 17.169027,6.445659 25.918814,6.445659 9.063819,0 27.522003,-6.445659 27.522003,-6.445659 C 73.955544,32.902575 63.171365,22.654173 51.015994,22.653103 Z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path1305"
         style="display:inline;opacity:0.198962;fill:#000000;stroke:none;stroke-width:1.99847;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 56.953175,23.172993 c 3.048591,4.144697 4.692141,9.144428 4.693359,14.277344 -0.0066,3.567665 -0.145854,13.370179 -1.682657,16.594838 L 77.766084,48.074204 C 74.588171,35.421379 66.582016,25.889147 56.953175,23.172993 Z"
         sodipodi:nodetypes="ccccc" />
    </g>
    <g
       id="g1331"
       inkscape:label="lasseer"
       style="display:inline"
       transform="matrix(1.5963973,0,0,1.2856194,1.1486306,3.1113582)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path1309"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path1311"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path1313"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path1315"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path1317"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path1319" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path1321" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path1323" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path1325"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path1327" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="ellipse1329"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <path
       style="fill:none;stroke:#008000;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 3.3206815,21.745109 C 14.603858,28.943952 25.887034,28.073351 37.17021,20.995277"
       id="path1333"
       sodipodi:nodetypes="cc"
       inkscape:label="divisorio" />
    <path
       style="fill:none;stroke:#ff00ff;stroke-width:1.05833;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 36.099023,15.53222 -3.856275,3.856275 -2.67797,-4.606106 -0.85695,7.391195 -0.85695,-2.999326 -2.463732,3.320682 -2.999325,-5.248819 -1.928137,2.892206 -1.606782,-3.4278 -4.713226,4.498987 -5.8915315,-1.928137 -0.6427126,2.785088 -4.8203438,-3.213563"
       id="path1335"
       inkscape:label="laserray"
       sodipodi:nodetypes="ccccccccccccc" />
    <path
       style="display:inline;fill:none;fill-opacity:1;stroke:#ff00ff;stroke-width:1.05833;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 35.938344,15.939793 -1.178306,4.820342 -3.427801,3.4278 -3.106444,-1.713901 -0.85695,2.999326 -2.463732,-3.320682 -2.999325,5.248819 -1.928137,-2.892206 -1.606782,3.4278 -4.820345,-3.213562 -2.142374,-5.141701 -4.4989886,3.4278 -4.4989878,-3.534919"
       id="path1337"
       inkscape:label="laserray"
       sodipodi:nodetypes="ccccccccccccc" />
    <g
       id="g37717-6"
       style="display:inline;opacity:0.586987;fill:#ff00ff;fill-opacity:1"
       transform="matrix(0.97889579,0,0,0.98654633,0.10393842,0.00707562)">
      <path
         id="path4410-3"
         style="display:inline;fill:#ff00ff;fill-opacity:1;stroke:#ff00ff;stroke-width:1.05833;stroke-linecap:round;stroke-dashoffset:302.362;paint-order:stroke markers fill;stop-color:#000000"
         d="M 37.705803,20.406124 A 17.567476,17.192562 0 0 1 20.138327,37.598686 17.567476,17.192562 0 0 1 2.5708504,20.406124 17.567476,17.192562 0 0 1 20.138327,3.213562 17.567476,17.192562 0 0 1 37.705803,20.406124 Z" />
      <text
         xml:space="preserve"
         style="font-size:3.175px;line-height:1.25;font-family:sans-serif;display:inline;fill:#ff00ff;fill-opacity:1;stroke-width:0.264583"
         id="text5688-2"><textPath
           xlink:href="#path4410-3"
           id="textPath35760-6"><tspan
             id="tspan5686-7"
             style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Jokerman;-inkscape-font-specification:Jokerman;fill:#ff00ff;fill-opacity:1;stroke-width:0.264583">MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</tspan></textPath></text>
    </g>
  </g>
  <g
     inkscape:label="dama astronave laser 2"
     id="g1920"
     style="display:none;fill:#003f3f;fill-opacity:1"
     inkscape:groupmode="layer">
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 14.169937,12.770631 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315187 l -3.401284,-1.855246"
       id="path1850"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-3" />
    <path
       style="fill:none;stroke:#333333;stroke-width:0.661458;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 25.084205,12.586245 c 0,0 1.493824,-5.5155097 -0.185525,-6.4315202 L 21.497396,4.2994791"
       id="path1852"
       sodipodi:nodetypes="csc"
       inkscape:label="antenna-9" />
    <g
       id="g1860"
       inkscape:label="pedina1"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="translate(7.1885412,2.8269641)">
      <path
         style="font-variation-settings:normal;display:inline;opacity:1;vector-effect:none;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000;stop-opacity:1"
         d="m 2.7432267,11.064347 c 0,0 -9.2919737,0.959862 -6.0037164,9.679699 2.2399344,5.939883 7.7450188,8.355902 16.1079337,8.720384 5.491778,0.239349 15.437361,-2.382818 16.77877,-8.392612 2.022847,-9.062784 -6.720272,-9.91603 -6.720272,-9.91603"
         id="path1854"
         sodipodi:nodetypes="csssc"
         inkscape:label="border" />
      <path
         id="path1856"
         style="font-variation-settings:normal;display:inline;vector-effect:none;fill:#003f3f;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;-inkscape-stroke:none;stop-color:#000000"
         inkscape:label="border"
         d="m 22.638605,21.966108 c -0.824212,3.692633 -4.897247,6.104506 -9.189105,7.361309 5.612316,-0.05866 14.60748,-2.709694 15.878618,-8.404656 2.022845,-9.062784 -6.72052,-9.916191 -6.72052,-9.916191 -47.137881,0.574639 2.719768,-3.4289761 0.03101,10.959538 z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path1858"
         style="display:inline;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:80;paint-order:stroke fill markers;stop-color:#000000"
         d="M 25.281155,14.464245 C 25.004243,15.644222 20.655674,20.70164 12.182565,20.139381 6.8537602,19.785772 -0.66429238,15.452341 -0.69241268,14.240633 -0.77273468,10.779565 6.8420426,8.8710526 12.182565,8.8710526 c 5.340523,0 13.74117,2.8550284 13.09859,5.5931924 z"
         inkscape:label="circle"
         sodipodi:nodetypes="sssss" />
    </g>
    <g
       id="g1884"
       inkscape:label="lasseer"
       style="display:inline;fill:#003f3f;fill-opacity:1"
       transform="matrix(1.5455405,-0.3997359,0.3219175,1.2446632,15.328212,5.061881)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path1862"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path1864"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path1866"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path1868"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path1870"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path1872" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path1874" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path1876" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path1878"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path1880" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="ellipse1882"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <g
       id="g1890"
       inkscape:label="cupola"
       transform="matrix(0.33850583,0,0,0.36048359,3.1066983,-0.38127005)">
      <path
         id="path1886"
         style="display:inline;fill:#00ffff;stroke:none;stroke-width:1.998;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 51.015994,22.653103 c -12.133509,0.03468 -22.88706,10.276717 -26.690727,25.421101 0,0 17.169027,6.445659 25.918814,6.445659 9.063819,0 27.522003,-6.445659 27.522003,-6.445659 C 73.955544,32.902575 63.171365,22.654173 51.015994,22.653103 Z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path1888"
         style="display:inline;opacity:0.198962;fill:#000000;stroke:none;stroke-width:1.99847;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 56.953175,23.172993 c 3.048591,4.144697 4.692141,9.144428 4.693359,14.277344 -0.0066,3.567665 -0.145854,13.370179 -1.682657,16.594838 L 77.766084,48.074204 C 74.588171,35.421379 66.582016,25.889147 56.953175,23.172993 Z"
         sodipodi:nodetypes="ccccc" />
    </g>
    <g
       id="g1914"
       inkscape:label="lasseer"
       style="display:inline"
       transform="matrix(1.5963973,0,0,1.2856194,1.1486306,3.1113582)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path1892"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path1894"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path1896"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path1898"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path1900"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path1902" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path1904" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path1906" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path1908"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path1910" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="ellipse1912"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <path
       style="fill:none;stroke:#008000;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 3.3206815,21.745109 C 14.603858,28.943952 25.887034,28.073351 37.17021,20.995277"
       id="path1916"
       sodipodi:nodetypes="cc"
       inkscape:label="divisorio" />
    <path
       style="fill:none;stroke:#ff00ff;stroke-width:1.05833;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 32.331617,18.316738 -1.34977,-3.238854 -1.065453,5.527855 -1.761162,-4.906094 -0.998303,5.297935 -2.3264,-5.021266 -0.155546,6.342563 -1.320871,-3.67957 -0.394392,4.426279 -2.910337,-6.43946 -1.793461,5.115614 -2.940087,-3.603497 -1.255847,2.07863"
       id="path1918"
       inkscape:label="laserray" />
  </g>
  <g
     inkscape:label="astronave"
     id="g3615"
     style="display:inline"
     transform="translate(-35.065499,18.341636)">
    <g
       id="g3609"
       inkscape:label="pedina1"
       style="display:inline"
       inkscape:export-filename="C:\Users\taal\Desktop\pedinaBaseali.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96">
      <path
         style="display:inline;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         d="m 2.596299,14.353228 c 0,0 -0.4164513,2.640186 0.1828813,4.238475 0.9030892,2.408342 6.7419898,5.783745 9.9213357,5.916431 4.492871,0.187503 8.883707,-1.170874 9.921336,-3.799764 0.53316,-1.350791 0.70045,-3.878009 0.70045,-3.878009 -0.02588,-1.747275 -0.663991,-3.426606 -0.03313,-2.385692"
         id="path3605-9"
         sodipodi:nodetypes="cssscc"
         inkscape:label="border" />
      <path
         style="display:inline;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         d="m 2.7432267,11.064347 c 0,0 -0.085105,2.73959 -0.1815994,4.371013 m 5.0083051,3.873346 c 1.9201624,0.990362 3.4883696,1.159737 5.4479396,1.333107 2.737801,0.242223 5.376019,-0.50607 6.876897,-1.400351 m 3.233775,-3.13777 c 0.003,-1.814676 -0.222602,-4.947904 -0.222602,-4.947904 v 0 0 M 7.4403687,16.130265 7.383572,22.4347 m 12.438479,-6.304435 0.113594,6.815605"
         id="path3605"
         sodipodi:nodetypes="cccsccccccccc"
         inkscape:label="border" />
      <path
         id="path3607"
         style="display:inline;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:80;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 22.448737,11.110066 c -0.276912,1.179977 -1.196764,6.461007 -9.669873,5.898748 C 7.4500588,16.655205 3.137111,12.321774 3.1089907,11.110066 3.0286687,7.6489976 7.4383412,5.7404851 12.778864,5.7404851 c 5.340523,0 10.312453,2.6314165 9.669873,5.3695809 z"
         inkscape:label="circle"
         sodipodi:nodetypes="sssss" />
    </g>
    <g
       id="use3611"
       transform="matrix(-0.2325268,0,0,0.2301022,14.786756,-3.9855315)"
       style="display:none">
      <path
         style="fill:#000055;fill-opacity:1;stroke:#000000;stroke-width:0.211015px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 11.887611,10.321903 c -1.294867,-0.5484849 -0.03156,-5.3770881 -1.135693,-3.3640898 -0.246175,0.4712557 -0.367759,0.8991449 -0.537961,1.4074249 -0.03527,0.105317 -0.15883,1.045407 -0.179319,0.995495 C 9.711397,8.5733141 9.6165604,5.4134662 9.1978084,4.9324935 9.1126904,4.8347295 9.0864403,5.1789307 9.0483747,5.3100955 8.7191102,6.4446619 8.6457301,6.7258019 8.3609808,7.8159991 8.2885618,8.0932651 8.1924548,8.9177531 8.1218872,8.6398571 8.0468502,8.3443611 7.0836725,4.9966578 6.8367596,5.1384585 6.7698406,5.1768895 6.1664098,7.9459331 6.0597058,7.8846541 5.8708958,7.7762221 5.9134638,7.4295302 5.8504988,7.1981052 5.7986888,7.0076917 4.7068698,3.5180809 4.5653708,4.0056528 c -0.05359,0.1846487 -0.983705,3.6357733 -0.98626,3.6387093 -0.06357,-0.7531239 -0.03095,-2.1446933 -0.119547,-3.0208155 -0.08119,-0.7875107 -0.576669,-2.5329107 -0.05977,-3.3640897 1.207022,-0.61474998 4.5904888,0.05939 5.260054,0.583567 1.6267922,1.341496 3.0137872,2.7339684 3.2576492,5.114789 0.04266,0.416517 0.06308,0.8851642 0.02989,1.3044432 3.039732,0.183678 -0.17259,0.546176 -0.05977,2.0596469 z"
         id="path33197"
         sodipodi:nodetypes="ccssssssssssccccsccc" />
      <path
         style="display:inline;fill:#000080;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:none;paint-order:stroke markers fill;stop-color:#000000"
         d="M 41.435758,17.875184 C 39.933816,15.944757 37.736491,13.74161 36.050334,12.475493 34.529035,11.333165 31.1221,9.5771445 29.219745,8.9548337 25.661656,7.7908886 20.073097,6.8699268 14.382186,6.5096906 12.573539,6.3952027 12.498138,6.335456 13.040276,5.4463809 c 0.243097,-0.3986643 0.464826,-0.5185662 1.403499,-0.7589544 1.52566,-0.390712 6.39277,-0.3923216 8.932021,-0.00295 3.284933,0.5037103 6.196932,1.2568572 7.976638,2.0630427 2.015247,0.9128828 6.879603,5.5831558 9.198986,8.8319538 0.824892,1.155442 2.187906,3.586586 2.074429,3.700063 -0.03015,0.03015 -0.565689,-0.601809 -1.190091,-1.404348 z"
         id="path33199"
         transform="scale(0.26458333)" />
    </g>
    <g
       id="use3613"
       transform="matrix(0.2325268,0,0,0.2301022,11.688966,-4.024332)"
       style="display:none">
      <path
         style="fill:#000055;fill-opacity:1;stroke:#000000;stroke-width:0.211015px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 11.887611,10.321903 c -1.294867,-0.5484849 -0.03156,-5.3770881 -1.135693,-3.3640898 -0.246175,0.4712557 -0.367759,0.8991449 -0.537961,1.4074249 -0.03527,0.105317 -0.15883,1.045407 -0.179319,0.995495 C 9.711397,8.5733141 9.6165604,5.4134662 9.1978084,4.9324935 9.1126904,4.8347295 9.0864403,5.1789307 9.0483747,5.3100955 8.7191102,6.4446619 8.6457301,6.7258019 8.3609808,7.8159991 8.2885618,8.0932651 8.1924548,8.9177531 8.1218872,8.6398571 8.0468502,8.3443611 7.0836725,4.9966578 6.8367596,5.1384585 6.7698406,5.1768895 6.1664098,7.9459331 6.0597058,7.8846541 5.8708958,7.7762221 5.9134638,7.4295302 5.8504988,7.1981052 5.7986888,7.0076917 4.7068698,3.5180809 4.5653708,4.0056528 c -0.05359,0.1846487 -0.983705,3.6357733 -0.98626,3.6387093 -0.06357,-0.7531239 -0.03095,-2.1446933 -0.119547,-3.0208155 -0.08119,-0.7875107 -0.576669,-2.5329107 -0.05977,-3.3640897 1.207022,-0.61474998 4.5904888,0.05939 5.260054,0.583567 1.6267922,1.341496 3.0137872,2.7339684 3.2576492,5.114789 0.04266,0.416517 0.06308,0.8851642 0.02989,1.3044432 3.039732,0.183678 -0.17259,0.546176 -0.05977,2.0596469 z"
         id="path33203"
         sodipodi:nodetypes="ccssssssssssccccsccc" />
      <path
         style="display:inline;fill:#000080;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:none;paint-order:stroke markers fill;stop-color:#000000"
         d="M 41.435758,17.875184 C 39.933816,15.944757 37.736491,13.74161 36.050334,12.475493 34.529035,11.333165 31.1221,9.5771445 29.219745,8.9548337 25.661656,7.7908886 20.073097,6.8699268 14.382186,6.5096906 12.573539,6.3952027 12.498138,6.335456 13.040276,5.4463809 c 0.243097,-0.3986643 0.464826,-0.5185662 1.403499,-0.7589544 1.52566,-0.390712 6.39277,-0.3923216 8.932021,-0.00295 3.284933,0.5037103 6.196932,1.2568572 7.976638,2.0630427 2.015247,0.9128828 6.879603,5.5831558 9.198986,8.8319538 0.824892,1.155442 2.187906,3.586586 2.074429,3.700063 -0.03015,0.03015 -0.565689,-0.601809 -1.190091,-1.404348 z"
         id="path33205"
         transform="scale(0.26458333)" />
    </g>
    <g
       id="g6351-4"
       inkscape:label="lasseer"
       style="display:inline"
       transform="translate(12.934073,-0.60025079)">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path4617-7"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path4617-6-6"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path4617-3-2"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path4617-36-7"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path4617-1-0"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path5975-6" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path5977-1" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path5979-4" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path5981-4"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path5983-4" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="path6178-0"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <path
       style="fill:none;stroke:#666666;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 9.9962204,7.6675553 9.3714566,3.1806155 6.1340445,1.1359342"
       id="path7193" />
    <path
       style="fill:none;stroke:#666666;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 15.051127,7.0995883 15.448704,2.4990551 13.63121,0.45437366"
       id="path7195" />
    <path
       style="fill:#00ffff;stroke:none;stroke-width:0.272567px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 13.005355,2.6004894 c 4.657925,0.2007096 4.94121,4.3261024 5.694829,7.8152146 0.01562,0.06408 0.126169,0.270723 0.100061,0.34213 C 16.479021,13.458725 9.056994,13.231699 7.0427915,10.073574 8.0565286,4.6784165 8.62115,3.0540779 13.005355,2.6004894 Z"
       id="path3650"
       sodipodi:nodetypes="ccccc" />
    <g
       id="g6351"
       inkscape:label="lasseer">
      <path
         style="fill:#916f6f;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.1685002,9.3146603 C 5.5826813,10.308694 7.0054439,10.498108 7.7811488,9.8258299 8.4216688,8.6931047 7.6213088,7.2074368 6.3896294,7.2699755 5.2316018,7.6989571 4.8870418,8.5150437 5.1685002,9.3146603 Z"
         id="path4617"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.213983px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 5.6025361,10.234147 C 5.9556272,10.996821 7.168538,11.14215 7.8298295,10.626343 8.3758753,9.7572575 7.6935652,8.6173759 6.6435536,8.6653583 5.6563305,8.9944956 5.3625917,9.62064 5.6025361,10.234147 Z"
         id="path4617-6"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.150999px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.3476508,11.218104 c 0.2696678,0.497265 1.1960098,0.592019 1.701061,0.255713 0.4170342,-0.566645 -0.1040697,-1.309849 -0.9059999,-1.278564 -0.7539765,0.214598 -0.978315,0.622844 -0.7950611,1.022851 z"
         id="path4617-3"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.1369px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 6.8680893,12.234425 c 0.2154711,0.511547 0.9556407,0.609023 1.3591888,0.263057 0.3332206,-0.58292 -0.083154,-1.347471 -0.7239158,-1.315287 -0.6024454,0.220761 -0.7816972,0.640734 -0.635273,1.05223 z"
         id="path4617-36"
         sodipodi:nodetypes="cccc" />
      <path
         style="display:inline;fill:#916f6f;stroke:#000000;stroke-width:0.102858px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.3517044,13.033807 c 0.1680993,0.370146 0.7455411,0.440678 1.0603683,0.190343 0.259961,-0.421791 -0.064873,-0.975006 -0.5647614,-0.951718 -0.4699965,0.159739 -0.6098395,0.463623 -0.4956069,0.761375 z"
         id="path4617-1"
         sodipodi:nodetypes="cccc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.8663439,12.836056 0.2839837,0.85195"
         id="path5975" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.5255638,11.89891 0.17039,0.454374"
         id="path5977" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="m 7.2131819,10.904968 0.085195,0.312382"
         id="path5979" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.8724015,9.6554402 7.0711901,10.251806"
         id="path5981"
         sodipodi:nodetypes="cc" />
      <path
         style="fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         d="M 6.3612312,8.121929 6.5884181,8.6614978"
         id="path5983" />
      <ellipse
         style="font-variation-settings:normal;opacity:1;vector-effect:none;fill:#916f6f;fill-opacity:1;stroke:none;stroke-width:1.32292;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:302.362;stroke-opacity:1;-inkscape-stroke:none;paint-order:stroke fill markers;stop-color:#000000;stop-opacity:1"
         id="path6178"
         cx="8.1787252"
         cy="13.716404"
         rx="0.42597532"
         ry="0.39757693" />
    </g>
    <path
       style="fill:none;stroke:#000080;stroke-width:0.79375;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 13.290429,4.3165498 c 0.85472,0.1111959 2.070204,0.5778518 2.555852,1.3063241"
       id="path7409"
       sodipodi:nodetypes="cc" />
  </g>
  <g
     id="layer1-2"
     inkscape:label="asronave"
     transform="matrix(0.26458334,0,0,0.26458334,-29.661733,-4.9988608)"
     style="display:inline"
     sodipodi:insensitive="true"
     inkscape:groupmode="layer">
    <use
       x="0"
       y="0"
       xlink:href="#path48923"
       id="use50094"
       width="100%"
       height="100%"
       transform="translate(42.772908,0.23373171)" />
    <path
       style="fill:none;stroke:#333333;stroke-width:2.5;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 29.683931,44.876494 c 0,0 5.645952,-20.846021 -0.701195,-24.308101 L 16.12749,13.556441"
       id="path48923"
       sodipodi:nodetypes="csc" />
    <path
       id="rect5228"
       style="display:inline;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:1.70967;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
       d="M 14.970967,48.572095 C 7.6232082,46.481958 1.1823309,56.555404 1.1823309,66.470287 c 0,9.914882 4.5704511,13.974417 13.7886361,17.896639 0,10e-7 10.433041,4.116199 35.440594,4.207957 25.007553,-0.09176 35.440595,-4.207956 35.440595,-4.207957 9.218185,-3.92222 13.788636,-7.981757 13.788636,-17.896639 0,-9.914883 -6.14938,-17.898192 -13.788636,-17.898192 0,0 -23.157725,10.081584 -35.439635,10.081671 -12.282526,8.8e-5 -35.441554,-10.081671 -35.441554,-10.081671 z"
       sodipodi:nodetypes="sscccssas" />
    <path
       id="rect41184"
       style="opacity:1;fill:#008080;fill-opacity:1;stroke:#008000;stroke-width:1.062;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;paint-order:fill markers stroke;stop-color:#000000"
       inkscape:transform-center-x="6.115112"
       d="m 35.242188,62.367188 -2.919922,22.61914 18.687424,1.970097 -0.220271,-22.701776 z m 15.526572,1.89779 0.256843,22.701777 18.935335,-1.980427 -2.919922,-22.61914 z"
       sodipodi:nodetypes="cccccccccc" />
    <path
       id="rect5228-1"
       style="display:inline;opacity:0.50519;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.70967;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
       d="m 67.715781,48.587891 a 44.789062,33.219933 0 0 1 7.318359,18.18164 44.789062,33.219933 0 0 1 -10.517578,21.291016 c 14.981328,-1.128718 21.498047,-3.677735 21.498047,-3.677735 9.21819,-3.922218 13.789062,-7.983555 13.789062,-17.898437 0,-9.914883 -6.149802,-17.896484 -13.789062,-17.896484 z" />
    <path
       style="opacity:1;fill:#00ff80;fill-opacity:1;stroke:#008000;stroke-width:1.56044;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;paint-order:fill markers stroke;stop-color:#000000"
       d="m 12.60237,49.938464 -0.86078,-0.595518 2.109091,-0.529918 c 20.555641,-5.164698 32.943953,-6.967342 41.574935,-6.049643 7.738729,0.822829 17.752095,2.769444 29.646088,5.763244 2.844019,0.715858 3.227062,0.921826 2.784694,1.190661 C 67.041016,62.367188 30.162225,62.086992 12.60237,49.938464 Z"
       id="path21737"
       sodipodi:nodetypes="scsssss" />
    <g
       id="g981"
       inkscape:label="cupola">
      <path
         id="path5450"
         style="display:inline;fill:#00ffff;stroke:none;stroke-width:1.998;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 51.015994,22.653103 c -12.133509,0.03468 -22.88706,10.276717 -26.690727,25.421101 0,0 17.169027,6.445659 25.918814,6.445659 9.063819,0 27.522003,-6.445659 27.522003,-6.445659 C 73.955544,32.902575 63.171365,22.654173 51.015994,22.653103 Z"
         sodipodi:nodetypes="ccscc" />
      <path
         id="path5450-0"
         style="display:inline;opacity:0.198962;fill:#000000;stroke:none;stroke-width:1.99847;stroke-opacity:1;paint-order:stroke fill markers;stop-color:#000000"
         d="m 56.953175,23.172993 c 3.048591,4.144697 4.692141,9.144428 4.693359,14.277344 -0.0066,3.567665 -0.145854,13.370179 -1.682657,16.594838 L 77.766084,48.074204 C 74.588171,35.421379 66.582016,25.889147 56.953175,23.172993 Z"
         sodipodi:nodetypes="ccccc" />
    </g>
    <g
       id="g2479"
       inkscape:label="laser"
       transform="matrix(0.98038969,0,0,1.002743,2.9783478,5.5498083)"
       style="display:inline;fill:#4d4d4d">
      <ellipse
         style="fill:#808080;stroke:#1a1a1a;paint-order:stroke fill markers;stop-color:#000000"
         id="path10063"
         cx="21.650801"
         cy="40.244045"
         rx="7.6025715"
         ry="7.3546619" />
      <ellipse
         style="fill:#666666;stroke:#1a1a1a;stroke-width:0.77;paint-order:stroke fill markers;stop-color:#000000"
         id="path10063-9"
         cx="22.176889"
         cy="40.161858"
         rx="5.8539801"
         ry="5.6630898" />
      <ellipse
         style="fill:#333333;stroke:#1a1a1a;stroke-width:0.5324;paint-order:stroke fill markers;stop-color:#000000"
         id="path10063-2"
         cx="22.514057"
         cy="40.821148"
         rx="4.0476089"
         ry="3.915622" />
      <ellipse
         style="fill:#000000;stroke:#1a1a1a;stroke-width:0.242;paint-order:stroke fill markers;stop-color:#000000"
         id="path10063-2-4"
         cx="23.188372"
         cy="40.820694"
         rx="1.8398223"
         ry="1.7798282" />
    </g>
    <use
       x="0"
       y="0"
       xlink:href="#g2479"
       id="use17338"
       width="100%"
       height="100%"
       transform="matrix(-1,0,0,1,102.78405,-0.49581989)" />
  </g>
  <script
     id="JessyInk"
     ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;svg&quot;)[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict[&quot;name&quot;] = &quot;appear&quot;;
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict[&quot;name&quot;] = &quot;appear&quot;;
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = &quot;red&quot;;
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
    // Make sure we only execute this code once. Double execution can occur if the onload event handler is set
    // in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
    // not lead to any problems, but it takes more time.
    if (jessyInkInitialised)
        return;

    // Making the presentation scalable.
    var VIEWBOX = ROOT_NODE.getAttribute(&quot;viewBox&quot;);

    if (VIEWBOX)
    {
        WIDTH = ROOT_NODE.viewBox.animVal.width;
        HEIGHT = ROOT_NODE.viewBox.animVal.height;
    }
    else
    {
        HEIGHT = parseFloat(ROOT_NODE.getAttribute(&quot;height&quot;));
        WIDTH = parseFloat(ROOT_NODE.getAttribute(&quot;width&quot;));
        ROOT_NODE.setAttribute(&quot;viewBox&quot;, &quot;0 0 &quot; + WIDTH + &quot; &quot; + HEIGHT);
    }

    ROOT_NODE.setAttribute(&quot;width&quot;, &quot;100%&quot;);
    ROOT_NODE.setAttribute(&quot;height&quot;, &quot;100%&quot;);

    // Setting the background color.
    var namedViews = document.getElementsByTagNameNS(NSS[&quot;sodipodi&quot;], &quot;namedview&quot;);

    for (var counter = 0; counter &lt; namedViews.length; counter++)
    {
        if (namedViews[counter].hasAttribute(&quot;id&quot;) &amp;&amp; namedViews[counter].hasAttribute(&quot;pagecolor&quot;))
        {
            if (namedViews[counter].getAttribute(&quot;id&quot;) == &quot;base&quot;)
            {
                BACKGROUND_COLOR = namedViews[counter].getAttribute(&quot;pagecolor&quot;);
                var newAttribute = &quot;background-color:&quot; + BACKGROUND_COLOR + &quot;;&quot;;

                if (ROOT_NODE.hasAttribute(&quot;style&quot;))
                    newAttribute += ROOT_NODE.getAttribute(&quot;style&quot;);

                ROOT_NODE.setAttribute(&quot;style&quot;, newAttribute);
            }
        }
    }

    // Defining clip-path.
    var defsNodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

    if (defsNodes.length &gt; 0)
    {
        var existingClipPath = document.getElementById(&quot;jessyInkSlideClipPath&quot;);

        if (!existingClipPath)
        {
            var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
            var clipPath = document.createElementNS(NSS[&quot;svg&quot;], &quot;clipPath&quot;);

            rectNode.setAttribute(&quot;x&quot;, 0);
            rectNode.setAttribute(&quot;y&quot;, 0);
            rectNode.setAttribute(&quot;width&quot;, WIDTH);
            rectNode.setAttribute(&quot;height&quot;, HEIGHT);

            clipPath.setAttribute(&quot;id&quot;, &quot;jessyInkSlideClipPath&quot;);
            clipPath.setAttribute(&quot;clipPathUnits&quot;, &quot;userSpaceOnUse&quot;);

            clipPath.appendChild(rectNode);
            defsNodes[0].appendChild(clipPath);
        }
    }

    // Making a list of the slide and finding the master slide.
    var nodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    var tempSlides = new Array();
    var existingJessyInkPresentationLayer = null;

    for (var counter = 0; counter &lt; nodes.length; counter++)
    {
        if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) &amp;&amp; (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) == &quot;layer&quot;))
        {
            if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;masterSlide&quot;) == &quot;masterSlide&quot;)
                masterSlide = nodes[counter];
            else if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;) == &quot;presentationLayer&quot;)
                existingJessyInkPresentationLayer = nodes[counter];
            else
                tempSlides.push(nodes[counter].getAttribute(&quot;id&quot;));
        }
        else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
        {
            handleElement(nodes[counter]);
        }
    }

    // Hide master slide set default transitions.
    if (masterSlide)
    {
        masterSlide.style.display = &quot;none&quot;;

        if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
            defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));

        if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
            defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
    }

    if (existingJessyInkPresentationLayer != null)
    {
        existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
    }

    // Set start slide.
    var hashObj = new LocationHash(window.location.hash);

    activeSlide = hashObj.slideNumber;
    activeEffect = hashObj.effectNumber;

    if (activeSlide &lt; 0)
        activeSlide = 0;
    else if (activeSlide &gt;= tempSlides.length)
        activeSlide = tempSlides.length - 1;

    var originalNode = document.getElementById(tempSlides[counter]);

    var JessyInkPresentationLayer = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;JessyInk Presentation Layer&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;, &quot;presentationLayer&quot;);
    JessyInkPresentationLayer.setAttribute(&quot;id&quot;, &quot;jessyink_presentation_layer&quot;);
    JessyInkPresentationLayer.style.display = &quot;inherit&quot;;
    ROOT_NODE.appendChild(JessyInkPresentationLayer);

    // Gathering all the information about the transitions and effects of the slides, set the background
    // from the master slide and substitute the auto-texts.
    for (var counter = 0; counter &lt; tempSlides.length; counter++)
    {
        var originalNode = document.getElementById(tempSlides[counter]);
        originalNode.style.display = &quot;none&quot;;
        var node = suffixNodeIds(originalNode.cloneNode(true), &quot;_&quot; + counter);
        JessyInkPresentationLayer.appendChild(node);
        slides[counter] = new Object();
        slides[counter][&quot;original_element&quot;] = originalNode;
        slides[counter][&quot;element&quot;] = node;

        // Set build in transition.
        slides[counter][&quot;transitionIn&quot;] = new Object();

        var dict;

        if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
            dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));
        else
            dict = defaultTransitionInDict;

        slides[counter][&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
        slides[counter][&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

        for (key in dict)
            if (key != &quot;name&quot;)
                slides[counter][&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

        // Set build out transition.
        slides[counter][&quot;transitionOut&quot;] = new Object();

        if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
            dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
        else
            dict = defaultTransitionOutDict;

        slides[counter][&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
        slides[counter][&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

        for (key in dict)
            if (key != &quot;name&quot;)
                slides[counter][&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

        // Copy master slide content.
        if (masterSlide)
        {
            var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + counter);
            clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
            clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
            clonedNode.style.display = &quot;inherit&quot;;

            node.insertBefore(clonedNode, node.firstChild);
        }

        // Setting clip path.
        node.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);

        // Substitute auto texts.
        substituteAutoTexts(node, node.getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;), counter + 1, tempSlides.length);

        node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
        node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);

        // Set effects.
        var tempEffects = new Array();
        var groups = new Object();

        for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
        {
            var propName = &quot;&quot;;
            var dir = 0;

            if (IOCounter == 0)
            {
                propName = &quot;effectIn&quot;;
                dir = 1;
            }
            else if (IOCounter == 1)
            {
                propName = &quot;effectOut&quot;;
                dir = -1;
            }

            var effects = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], propName);

            for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
            {
                var element = document.getElementById(effects[effectCounter]);
                var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], propName));

                // Put every element that has an effect associated with it, into its own group.
                // Unless of course, we already put it into its own group.
                if (!(groups[element.id]))
                {
                    var newGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

                    element.parentNode.insertBefore(newGroup, element);
                    newGroup.appendChild(element.parentNode.removeChild(element));
                    groups[element.id] = newGroup;
                }

                var effectDict = new Object();

                effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
                effectDict[&quot;dir&quot;] = dir;
                effectDict[&quot;element&quot;] = groups[element.id];

                for (var option in dict)
                {
                    if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
                    {
                        if (!effectDict[&quot;options&quot;])
                            effectDict[&quot;options&quot;] = new Object();

                        effectDict[&quot;options&quot;][option] = dict[option];
                    }
                }

                if (!tempEffects[dict[&quot;order&quot;]])
                    tempEffects[dict[&quot;order&quot;]] = new Array();

                tempEffects[dict[&quot;order&quot;]][tempEffects[dict[&quot;order&quot;]].length] = effectDict;
            }
        }

        // Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
        node.setAttribute(&quot;opacity&quot;,0);
        node.style.display = &quot;inherit&quot;;

        // Create a transform group.
        var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

        // Add content to transform group.
        while (node.firstChild)
            transformGroup.appendChild(node.firstChild);

        // Transfer the transform attribute from the node to the transform group.
        if (node.getAttribute(&quot;transform&quot;))
        {
            transformGroup.setAttribute(&quot;transform&quot;, node.getAttribute(&quot;transform&quot;));
            node.removeAttribute(&quot;transform&quot;);
        }

        // Create a view group.
        var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

        viewGroup.appendChild(transformGroup);
        slides[counter][&quot;viewGroup&quot;] = node.appendChild(viewGroup);

        // Insert background.
        if (BACKGROUND_COLOR != null)
        {
            var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

            rectNode.setAttribute(&quot;x&quot;, 0);
            rectNode.setAttribute(&quot;y&quot;, 0);
            rectNode.setAttribute(&quot;width&quot;, WIDTH);
            rectNode.setAttribute(&quot;height&quot;, HEIGHT);
            rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + counter);
            rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

            slides[counter][&quot;viewGroup&quot;].insertBefore(rectNode, slides[counter][&quot;viewGroup&quot;].firstChild);
        }

        // Set views.
        var tempViews = new Array();
        var views = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], &quot;view&quot;);
        var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

        // Set initial view even if there are no other views.
        slides[counter][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
        slides[counter].initialView = matrixOld.toAttribute();

        for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
        {
            var element = document.getElementById(views[viewCounter]);
            var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;view&quot;));

            if (dict[&quot;order&quot;] == 0)
            {
                matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
                slides[counter].initialView = matrixOld.toAttribute();
            }
            else
            {
                var effectDict = new Object();

                effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
                effectDict[&quot;dir&quot;] = 1;
                effectDict[&quot;element&quot;] = slides[counter][&quot;viewGroup&quot;];
                effectDict[&quot;order&quot;] = dict[&quot;order&quot;];

                for (var option in dict)
                {
                    if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
                    {
                        if (!effectDict[&quot;options&quot;])
                            effectDict[&quot;options&quot;] = new Object();

                        effectDict[&quot;options&quot;][option] = dict[option];
                    }
                }

                effectDict[&quot;options&quot;][&quot;matrixNew&quot;] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

                tempViews[dict[&quot;order&quot;]] = effectDict;
            }

            // Remove element.
            element.parentNode.removeChild(element);
        }

        // Consolidate view array and append it to the effect array.
        if (tempViews.length &gt; 0)
        {
            for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
            {
                if (tempViews[viewCounter])
                {
                    tempViews[viewCounter][&quot;options&quot;][&quot;matrixOld&quot;] = matrixOld;
                    matrixOld = tempViews[viewCounter][&quot;options&quot;][&quot;matrixNew&quot;];

                    if (!tempEffects[tempViews[viewCounter][&quot;order&quot;]])
                        tempEffects[tempViews[viewCounter][&quot;order&quot;]] = new Array();

                    tempEffects[tempViews[viewCounter][&quot;order&quot;]][tempEffects[tempViews[viewCounter][&quot;order&quot;]].length] = tempViews[viewCounter];
                }
            }
        }

        // Set consolidated effect array.
        if (tempEffects.length &gt; 0)
        {
            slides[counter][&quot;effects&quot;] = new Array();

            for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
            {
                if (tempEffects[effectCounter])
                    slides[counter][&quot;effects&quot;][slides[counter][&quot;effects&quot;].length] = tempEffects[effectCounter];
            }
        }

        node.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);

        // Set visibility for initial state.
        if (counter == activeSlide)
        {
            node.style.display = &quot;inherit&quot;;
            node.setAttribute(&quot;opacity&quot;,1);
        }
        else
        {
            node.style.display = &quot;none&quot;;
            node.setAttribute(&quot;opacity&quot;,0);
        }
    }

    // Set key handler.
    var jessyInkObjects = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
    {
        var elem = jessyInkObjects[counter];

        if (elem.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;customKeyBindings&quot;))
        {
            if (elem.getCustomKeyBindings != undefined)
                keyCodeDictionary = elem.getCustomKeyBindings();

            if (elem.getCustomCharBindings != undefined)
                charCodeDictionary = elem.getCustomCharBindings();
        }
    }

    // Set mouse handler.
    var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS[&quot;jessyink&quot;], &quot;mousehandler&quot;);

    for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
    {
        var elem = jessyInkMouseHandler[counter];

        if (elem.getMouseHandler != undefined)
        {
            var tempDict = elem.getMouseHandler();

            for (mode in tempDict)
            {
                if (!mouseHandlerDictionary[mode])
                    mouseHandlerDictionary[mode] = new Object();

                for (handler in tempDict[mode])
                    mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
            }
        }
    }

    // Check effect number.
    if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
    {
        activeEffect = 0;
    }
    else if (activeEffect &gt; slides[activeSlide].effects.length)
    {
        activeEffect = slides[activeSlide].effects.length;
    }

    createProgressBar(JessyInkPresentationLayer);
    hideProgressBar();
    setProgressBarValue(activeSlide);
    setTimeIndicatorValue(0);
    setInterval(&quot;updateTimer()&quot;, 1000);
    setSlideToState(activeSlide, activeEffect);
    jessyInkInitialised = true;
}

/** Function to substitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
    var texts = node.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;tspan&quot;);

    for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
    {
        if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideNumber&quot;)
            texts[textCounter].firstChild.nodeValue = slideNumber;
        else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;numberOfSlides&quot;)
            texts[textCounter].firstChild.nodeValue = numberOfSlides;
        else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideTitle&quot;)
            texts[textCounter].firstChild.nodeValue = slideName;
    }
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *    This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
    var elems = new Array();

    if (node.getAttributeNS(namespace, name))
        elems.push(node.getAttribute(&quot;id&quot;));

    for (var counter = 0; counter &lt; node.childNodes.length; counter++)
    {
        if (node.childNodes[counter].nodeType == 1)
            elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
    }

    return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (dir == 1)
        {
            effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
            activeEffect += dir;
        }
        else if (dir == -1)
        {
            activeEffect += dir;
            effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
        }

        transCounter = 0;
        startTime = (new Date()).getTime();
        lastFrameTime = null;
        effect(dir);
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == 1))
            activeEffect = slides[activeSlide][&quot;effects&quot;].length;
        else
            activeEffect = 0;

        if (dir == 1)
            setSlideToState(activeSlide, STATE_END);
        else
            setSlideToState(activeSlide, STATE_START);

        processingEffect = false;
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
    processingEffect = true;
    effectArray = new Array();

    effectArray[0] = new Object();
    if (dir == 1)
    {
        effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
        effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
        effectArray[0][&quot;dir&quot;] = -1;
    }
    else if (dir == -1)
    {
        effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
        effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
        effectArray[0][&quot;dir&quot;] = 1;
    }
    effectArray[0][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

    activeSlide += dir;
    setProgressBarValue(activeSlide);

    effectArray[1] = new Object();

    if (dir == 1)
    {
        effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
        effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
        effectArray[1][&quot;dir&quot;] = 1;
    }
    else if (dir == -1)
    {
        effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
        effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
        effectArray[1][&quot;dir&quot;] = -1;
    }

    effectArray[1][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == -1))
        activeEffect = slides[activeSlide][&quot;effects&quot;].length;
    else
        activeEffect = 0;

    if (dir == -1)
        setSlideToState(activeSlide, STATE_END);
    else
        setSlideToState(activeSlide, STATE_START);

    transCounter = 0;
    startTime = (new Date()).getTime();
    lastFrameTime = null;
    effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
    var suspendHandle = ROOT_NODE.suspendRedraw(500);

    if (currentMode == SLIDE_MODE)
    {
        hideProgressBar();
        INDEX_OFFSET = -1;
        indexSetPageSlide(activeSlide);
        currentMode = INDEX_MODE;
    }
    else if (currentMode == INDEX_MODE)
    {
        for (var counter = 0; counter &lt; slides.length; counter++)
        {
            slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(1)&quot;);

            if (counter == activeSlide)
            {
                slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
                slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
                activeEffect = 0;
            }
            else
            {
                slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
                slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
            }
        }
        currentMode = SLIDE_MODE;
        setSlideToState(activeSlide, STATE_START);
        setProgressBarValue(activeSlide);

        if (progress_bar_visible)
        {
            showProgressBar();
        }
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
    var done = true;

    var suspendHandle = ROOT_NODE.suspendRedraw(200);

    for (var counter = 0; counter &lt; effectArray.length; counter++)
    {
        if (effectArray[counter][&quot;effect&quot;] == &quot;fade&quot;)
            done &amp;= fade(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;appear&quot;)
            done &amp;= appear(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;pop&quot;)
            done &amp;= pop(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;view&quot;)
            done &amp;= view(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();

    if (!done)
    {
        var currentTime = (new Date()).getTime();
        var timeDiff = 1;

        transCounter = currentTime - startTime;

        if (lastFrameTime != null)
        {
            timeDiff = timeStep - (currentTime - lastFrameTime);

            if (timeDiff &lt;= 0)
                timeDiff = 1;
        }

        lastFrameTime = currentTime;

        window.setTimeout(&quot;effect(&quot; + dir + &quot;)&quot;, timeDiff);
    }
    else
    {
        window.location.hash = (activeSlide + 1) + '_' + activeEffect;
        processingEffect = false;
    }
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
    var offsetX = 0;
    var offsetY = 0;

    if (offsetNumber &lt; 0)
        offsetNumber = 0;
    else if (offsetNumber &gt;= slides.length)
        offsetNumber = slides.length - 1;

    for (var counter = 0; counter &lt; slides.length; counter++)
    {
        if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
        {
            slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
            slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
        }
        else
        {
            offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
            offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

            slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(&quot;+1/INDEX_COLUMNS+&quot;) translate(&quot;+offsetX+&quot;,&quot;+offsetY+&quot;)&quot;);
            slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
            slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);
        }

        setSlideToState(counter, STATE_END);
    }

    //do we need to save the current offset?
    if (INDEX_OFFSET != offsetNumber)
        INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
    slides[activeSlide][&quot;element&quot;].style.display = &quot;none&quot;;

    activeSlide = parseInt(nbr);

    setSlideToState(activeSlide, STATE_START);
    slides[activeSlide][&quot;element&quot;].style.display = &quot;inherit&quot;;
    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);

    activeEffect = 0;
    setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);

    activeSlide = parseInt(nbr);
    window.location.hash = (activeSlide + 1) + '_0';

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
}

/** Function to set the page and active slide in index view.
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    //calculate the offset
    var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

    if (offset &lt; 0)
        offset = 0;

    //if different from kept offset, then record and change the page
    if (offset != INDEX_OFFSET)
    {
        INDEX_OFFSET = offset;
        displayIndex(INDEX_OFFSET);
    }

    //set the active slide
    indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
    if (!e)
        e = window.event;

    code = e.keyCode || e.charCode;

    if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
        return keyCodeDictionary[currentMode][code]();
    else
        document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
    document.onkeypress = null;

    if (!e)
        e = window.event;

    str = String.fromCharCode(e.keyCode || e.charCode);

    if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
        return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
    var charCodeDict = new Object();

    charCodeDict[SLIDE_MODE] = new Object();
    charCodeDict[INDEX_MODE] = new Object();
    charCodeDict[DRAWING_MODE] = new Object();

    charCodeDict[SLIDE_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
    charCodeDict[SLIDE_MODE][&quot;d&quot;] = function () { return slideSwitchToDrawingMode(); };
    charCodeDict[SLIDE_MODE][&quot;D&quot;] = function () { return slideQueryDuration(); };
    charCodeDict[SLIDE_MODE][&quot;n&quot;] = function () { return slideAddSlide(activeSlide); };
    charCodeDict[SLIDE_MODE][&quot;p&quot;] = function () { return slideToggleProgressBarVisibility(); };
    charCodeDict[SLIDE_MODE][&quot;t&quot;] = function () { return slideResetTimer(); };
    charCodeDict[SLIDE_MODE][&quot;e&quot;] = function () { return slideUpdateExportLayer(); };

    charCodeDict[DRAWING_MODE][&quot;d&quot;] = function () { return drawingSwitchToSlideMode(); };
    charCodeDict[DRAWING_MODE][&quot;0&quot;] = function () { return drawingResetPathWidth(); };
    charCodeDict[DRAWING_MODE][&quot;1&quot;] = function () { return drawingSetPathWidth(1.0); };
    charCodeDict[DRAWING_MODE][&quot;3&quot;] = function () { return drawingSetPathWidth(3.0); };
    charCodeDict[DRAWING_MODE][&quot;5&quot;] = function () { return drawingSetPathWidth(5.0); };
    charCodeDict[DRAWING_MODE][&quot;7&quot;] = function () { return drawingSetPathWidth(7.0); };
    charCodeDict[DRAWING_MODE][&quot;9&quot;] = function () { return drawingSetPathWidth(9.0); };
    charCodeDict[DRAWING_MODE][&quot;b&quot;] = function () { return drawingSetPathColour(&quot;blue&quot;); };
    charCodeDict[DRAWING_MODE][&quot;c&quot;] = function () { return drawingSetPathColour(&quot;cyan&quot;); };
    charCodeDict[DRAWING_MODE][&quot;g&quot;] = function () { return drawingSetPathColour(&quot;green&quot;); };
    charCodeDict[DRAWING_MODE][&quot;k&quot;] = function () { return drawingSetPathColour(&quot;black&quot;); };
    charCodeDict[DRAWING_MODE][&quot;m&quot;] = function () { return drawingSetPathColour(&quot;magenta&quot;); };
    charCodeDict[DRAWING_MODE][&quot;o&quot;] = function () { return drawingSetPathColour(&quot;orange&quot;); };
    charCodeDict[DRAWING_MODE][&quot;r&quot;] = function () { return drawingSetPathColour(&quot;red&quot;); };
    charCodeDict[DRAWING_MODE][&quot;w&quot;] = function () { return drawingSetPathColour(&quot;white&quot;); };
    charCodeDict[DRAWING_MODE][&quot;y&quot;] = function () { return drawingSetPathColour(&quot;yellow&quot;); };
    charCodeDict[DRAWING_MODE][&quot;z&quot;] = function () { return drawingUndo(); };

    charCodeDict[INDEX_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
    charCodeDict[INDEX_MODE][&quot;-&quot;] = function () { return indexDecreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;=&quot;] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;+&quot;] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;0&quot;] = function () { return indexResetNumberOfColumns(); };

    return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
    var keyCodeDict = new Object();

    keyCodeDict[SLIDE_MODE] = new Object();
    keyCodeDict[INDEX_MODE] = new Object();
    keyCodeDict[DRAWING_MODE] = new Object();

    keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
    keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
    keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
    keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
    keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

    keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
    keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
    keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
    keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
    keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

    keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

    return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *    @param    evnt    event
 *    @param    action    type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
    if (!evnt)
        evnt = window.event;

    var retVal = true;

    if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
    {
        var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

        if (subRetVal != null &amp;&amp; subRetVal != undefined)
            retVal = subRetVal;
    }

    if (evnt.preventDefault &amp;&amp; !retVal)
        evnt.preventDefault();

    evnt.returnValue = retVal;

    return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
    window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
    var mouseHandlerDict = new Object();

    mouseHandlerDict[SLIDE_MODE] = new Object();
    mouseHandlerDict[INDEX_MODE] = new Object();
    mouseHandlerDict[DRAWING_MODE] = new Object();

    mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
    mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

    mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

    mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

    return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
    currentMode = DRAWING_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute(&quot;style&quot;))
        tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
    else
        tempDict = new Object();

    tempDict[&quot;cursor&quot;] = &quot;crosshair&quot;;
    ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
    currentMode = SLIDE_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute(&quot;style&quot;))
        tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
    else
        tempDict = new Object();

    tempDict[&quot;cursor&quot;] = &quot;auto&quot;;
    ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &gt;= 3)
    {
        INDEX_COLUMNS -= 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &lt; 7)
    {
        INDEX_COLUMNS += 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
    if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
    {
        INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
    path_width = path_width_default;
    set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
    path_width = width;
    set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
    path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
    var new_duration = prompt(&quot;Length of presentation in minutes?&quot;, timer_duration);

    if ((new_duration != null) &amp;&amp; (new_duration != ''))
    {
        timer_duration = new_duration;
    }

    updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
    addSlide(afterSlide);
    slideSetActiveSlide(afterSlide + 1);
    updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
    if (progress_bar_visible)
    {
        progress_bar_visible = false;
        hideProgressBar();
    }
    else
    {
        progress_bar_visible = true;
        showProgressBar();
    }
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
    timer_start = timer_elapsed;
    updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
    var outStr = str;

    while (outStr.length &lt; len)
    {
        outStr = '0' + outStr;
    }

    return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
    // Suspend redraw since we are going to mess with the slides.
    var suspendHandle = ROOT_NODE.suspendRedraw(2000);

    var tmpActiveSlide = activeSlide;
    var tmpActiveEffect = activeEffect;
    var exportedLayers = new Array();

    for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
    {
        var exportNode;

        setSlideToState(counterSlides, STATE_START);

        var maxEffect = 0;

        if (slides[counterSlides].effects)
        {
            maxEffect = slides[counterSlides].effects.length;
        }

        exportNode = slides[counterSlides].element.cloneNode(true);
        exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
        exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString(&quot;0&quot;, maxEffect.toString().length));

        exportedLayers.push(exportNode);

        if (slides[counterSlides][&quot;effects&quot;])
        {
            for (var counter = 0; counter &lt; slides[counterSlides][&quot;effects&quot;].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[counterSlides][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[counterSlides][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }

                var layerName = &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString((counter + 1).toString(), maxEffect.toString().length);
                exportNode = slides[counterSlides].element.cloneNode(true);
                exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
                exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, layerName);
                exportNode.setAttribute(&quot;id&quot;, layerName);

                exportedLayers.push(exportNode);
            }
        }
    }

    activeSlide = tmpActiveSlide;
    activeEffect = tmpActiveEffect;
    setSlideToState(activeSlide, activeEffect);

    // Copy image.
    var newDoc = document.documentElement.cloneNode(true);

    // Delete viewbox form new imag and set width and height.
    newDoc.removeAttribute('viewbox');
    newDoc.setAttribute('width', WIDTH);
    newDoc.setAttribute('height', HEIGHT);

    // Delete all layers and script elements.
    var nodesToBeRemoved = new Array();

    for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
    {
        var child = newDoc.childNodes[childCounter];

        if (child.nodeType == 1)
        {
            if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
            {
                nodesToBeRemoved.push(child);
            }
        }
    }

    for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
    {
        var nd = nodesToBeRemoved[ndCounter];

        // Before removing the node, check whether it contains any definitions.
        var defs = nd.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

        for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
        {
            if (defs[defsCounter].id)
            {
                newDoc.appendChild(defs[defsCounter].cloneNode(true));
            }
        }

        // Remove node.
        nd.parentNode.removeChild(nd);
    }

    // Set current layer.
    if (exportedLayers[0])
    {
        var namedView;

        for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
        {
            if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
            {
                namedView = newDoc.childNodes[nodeCounter];
            }
        }

        if (namedView)
        {
            namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
        }
    }

    // Add exported layers.
    while (exportedLayers.length &gt; 0)
    {
        var nd = exportedLayers.pop();

        nd.setAttribute(&quot;opacity&quot;,1);
        nd.style.display = &quot;inherit&quot;;

        newDoc.appendChild(nd);
    }

    // Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

    // Unsuspend redraw.
    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
    mouse_presentation_path = null;
    mouse_original_path = null;

    if (history_presentation_elements.length &gt; 0)
    {
        var p = history_presentation_elements.pop();
        var parent = p.parentNode.removeChild(p);

        p = history_original_elements.pop();
        parent = p.parentNode.removeChild(p);
    }
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
    var value = 0;

    if (e.button)
        value = e.button;
    else if (e.which)
        value = e.which;

    if (value == 1)
    {
        history_counter++;

        var p = calcCoord(e);

        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
        mouse_original_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
        mouse_original_path.setAttribute(&quot;stroke&quot;, path_colour);
        mouse_original_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
        mouse_original_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
        mouse_original_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date());
        mouse_original_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);
        slides[activeSlide][&quot;original_element&quot;].appendChild(mouse_original_path);
        history_original_elements.push(mouse_original_path);

        mouse_presentation_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
        mouse_presentation_path.setAttribute(&quot;stroke&quot;, path_colour);
        mouse_presentation_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
        mouse_presentation_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
        mouse_presentation_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date() + &quot; presentation copy&quot;);
        mouse_presentation_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);

        if (slides[activeSlide][&quot;viewGroup&quot;])
            slides[activeSlide][&quot;viewGroup&quot;].appendChild(mouse_presentation_path);
        else
            slides[activeSlide][&quot;element&quot;].appendChild(mouse_presentation_path);

        history_presentation_elements.push(mouse_presentation_path);

        return false;
    }

    return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
    if(!e)
        e = window.event;

    if (mouse_presentation_path != null)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
        d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
        mouse_presentation_path.setAttribute(&quot;d&quot;, d);
        mouse_presentation_path = null;
        mouse_original_path.setAttribute(&quot;d&quot;, d);
        mouse_original_path = null;

        return false;
    }

    return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
    if(!e)
        e = window.event;

    var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

    if (mouse_presentation_path == null)
    {
        return true;
    }

    if (dist &gt;= mouse_min_dist_sqr)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
        d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
        mouse_presentation_path.setAttribute(&quot;d&quot;, d);
        mouse_original_path.setAttribute(&quot;d&quot;, d);
        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
    }

    return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        skipEffects(-1);
    else if (delta &lt; 0)
        skipEffects(1);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
    else if (delta &lt; 0)
        indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
    var svgPoint1 = document.documentElement.createSVGPoint();
    var svgPoint2 = document.documentElement.createSVGPoint();

    svgPoint1.x = 0.0;
    svgPoint1.y = 0.0;
    svgPoint2.x = 1.0;
    svgPoint2.y = 0.0;

    var matrix = slides[activeSlide][&quot;element&quot;].getTransformToElement(ROOT_NODE);

    if (slides[activeSlide][&quot;viewGroup&quot;])
        matrix = slides[activeSlide][&quot;viewGroup&quot;].getTransformToElement(ROOT_NODE);

    svgPoint1 = svgPoint1.matrixTransform(matrix);
    svgPoint2 = svgPoint2.matrixTransform(matrix);

    path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if (!options[&quot;matrixInitial&quot;])
    {
        var tempString = slides[activeSlide][&quot;viewGroup&quot;].getAttribute(&quot;transform&quot;);

        if (tempString)
            options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromAttribute(tempString);
        else
            options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
    }

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixNew&quot;].toAttribute());

            set_path_paint_width();

            options[&quot;matrixInitial&quot;] = null;
            return true;
        }
        else
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixNew&quot;], fraction).toAttribute());
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixOld&quot;].toAttribute());
            set_path_paint_width();

            options[&quot;matrixInitial&quot;] = null;
            return true;
        }
        else
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixOld&quot;], fraction).toAttribute());
        }
    }

    return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = &quot;none&quot;;
            element.setAttribute(&quot;opacity&quot;, 0);
        }
        else if (fraction &gt;= 1)
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1);
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, fraction);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1);
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.style.display = &quot;none&quot;;
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1 - fraction);
        }
    }
    return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
    if (dir == 1)
    {
        element.style.display = &quot;inherit&quot;;
        element.setAttribute(&quot;opacity&quot;,1);
    }
    else if (dir == -1)
    {
        element.style.display = &quot;none&quot;;
        element.setAttribute(&quot;opacity&quot;,0);
    }
    return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
    var length = 500;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.setAttribute(&quot;transform&quot;, &quot;scale(0)&quot;);
            element.style.display = &quot;none&quot;;
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 1);
            element.removeAttribute(&quot;transform&quot;);
            element.style.display = &quot;inherit&quot;;
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            var opacityFraction = fraction * 3;
            if (opacityFraction &gt; 1)
                opacityFraction = 1;
            element.setAttribute(&quot;opacity&quot;, opacityFraction);
            var offsetX = WIDTH * (1.0 - fraction) / 2.0;
            var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
            element.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + offsetX + &quot;,&quot; + offsetY + &quot;) scale(&quot; + fraction + &quot;)&quot;);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;opacity&quot;, 1);
            element.setAttribute(&quot;transform&quot;, &quot;scale(1)&quot;);
            element.style.display = &quot;inherit&quot;;
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.removeAttribute(&quot;transform&quot;);
            element.style.display = &quot;none&quot;;
            return true;
        }
        else
        {
            element.setAttribute(&quot;opacity&quot;, 1 - fraction);
            element.setAttribute(&quot;transform&quot;, &quot;scale(&quot; + 1 - fraction + &quot;)&quot;);
            element.style.display = &quot;inherit&quot;;
        }
    }
    return false;
}

/** Function to set a slide either to the start or the end state.
 *
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
    slides[slide][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, slides[slide].initialView);

    if (slides[slide][&quot;effects&quot;])
    {
        if (state == STATE_END)
        {
            for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }
            }
        }
        else if (state == STATE_START)
        {
            for (var counter = slides[slide][&quot;effects&quot;].length - 1; counter &gt;= 0; counter--)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                }
            }
        }
        else
        {
            setSlideToState(slide, STATE_START);

            for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length &amp;&amp; counter &lt; state; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }
            }
        }
    }

    window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *    @param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
    var list = str.split(&quot;;&quot;);
    var obj = new Object();

    for (var counter = 0; counter &lt; list.length; counter++)
    {
        var subStr = list[counter];
        var subList = subStr.split(&quot;:&quot;);
        if (subList.length == 2)
        {
            obj[subList[0]] = subList[1];
        }
    }

    return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
    var str = &quot;&quot;;

    for (var key in dict)
    {
        str += key + &quot;:&quot; + dict[key] + &quot;;&quot;;
    }

    return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *    @param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
    if (node.nodeType == 1)
    {
        if (node.getAttribute(&quot;id&quot;))
        {
            var id = node.getAttribute(&quot;id&quot;)
                replace[&quot;#&quot; + id] = id + suffix;
            node.setAttribute(&quot;id&quot;, id + suffix);
        }

        if ((node.nodeName == &quot;use&quot;) &amp;&amp; (node.getAttributeNS(NSS[&quot;xlink&quot;], &quot;href&quot;)) &amp;&amp; (replace[node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;)]))
            node.setAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;, node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;) + suffix);

        if (node.childNodes)
        {
            for (var counter = 0; counter &lt; node.childNodes.length; counter++)
                suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
        }
    }
}

/** Function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
    var replace = new Object();

    suffixNoneIds_sub(node, suffix, replace);

    return node;
}

/** Function to build a progress bar.
 *
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
    var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;layer_progress_bar&quot;);
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    var rect_progress_bar = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
    rect_progress_bar.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(128, 128, 128); stroke: none;&quot;);
    rect_progress_bar.setAttribute(&quot;id&quot;, &quot;rect_progress_bar&quot;);
    rect_progress_bar.setAttribute(&quot;x&quot;, 0);
    rect_progress_bar.setAttribute(&quot;y&quot;, 0.99 * HEIGHT);
    rect_progress_bar.setAttribute(&quot;width&quot;, 0);
    rect_progress_bar.setAttribute(&quot;height&quot;, 0.01 * HEIGHT);
    g.appendChild(rect_progress_bar);

    var circle_timer_indicator = document.createElementNS(NSS[&quot;svg&quot;], &quot;circle&quot;);
    circle_timer_indicator.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(255, 0, 0); stroke: none;&quot;);
    circle_timer_indicator.setAttribute(&quot;id&quot;, &quot;circle_timer_indicator&quot;);
    circle_timer_indicator.setAttribute(&quot;cx&quot;, 0.005 * HEIGHT);
    circle_timer_indicator.setAttribute(&quot;cy&quot;, 0.995 * HEIGHT);
    circle_timer_indicator.setAttribute(&quot;r&quot;, 0.005 * HEIGHT);
    g.appendChild(circle_timer_indicator);

    parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *
 */
function hideProgressBar()
{
    var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
}

/** Function to show the progress bar.
 *
 */
function showProgressBar()
{
    var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute(&quot;style&quot;, &quot;display: inherit;&quot;);
}

/** Set progress bar value.
 *
 *    @param value the current slide number
 *
 */
function setProgressBarValue(value)
{
    var rect_progress_bar = document.getElementById(&quot;rect_progress_bar&quot;);

    if (!rect_progress_bar)
    {
        return;
    }

    if (value &lt; 1)
    {
        // First slide, assumed to be the title of the presentation
        var x = 0;
        var w = 0.01 * HEIGHT;
    }
    else if (value &gt;= slides.length - 1)
    {
        // Last slide, assumed to be the end of the presentation
        var x = WIDTH - 0.01 * HEIGHT;
        var w = 0.01 * HEIGHT;
    }
    else
    {
        value -= 1;
        value /= (slides.length - 2);

        var x = WIDTH * value;
        var w = WIDTH / (slides.length - 2);
    }

    rect_progress_bar.setAttribute(&quot;x&quot;, x);
    rect_progress_bar.setAttribute(&quot;width&quot;, w);
}

/** Set time indicator.
 *
 *    @param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
    var circle_timer_indicator = document.getElementById(&quot;circle_timer_indicator&quot;);

    if (!circle_timer_indicator)
    {
        return;
    }

    if (value &lt; 0.0)
    {
        value = 0.0;
    }

    if (value &gt; 1.0)
    {
        value = 1.0;
    }

    var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
    circle_timer_indicator.setAttribute(&quot;cx&quot;, cx);
}

/** Update timer.
 *
 */
function updateTimer()
{
    timer_elapsed += 1;
    setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system
 */
function calcCoord(e)
{
    var svgPoint = document.documentElement.createSVGPoint();
    svgPoint.x = e.clientX + window.pageXOffset;
    svgPoint.y = e.clientY + window.pageYOffset;

    var matrix = slides[activeSlide][&quot;element&quot;].getScreenCTM();

    if (slides[activeSlide][&quot;viewGroup&quot;])
        matrix = slides[activeSlide][&quot;viewGroup&quot;].getScreenCTM();

    svgPoint = svgPoint.matrixTransform(matrix.inverse());
    return svgPoint;
}

/** Add slide.
 *
 *    @param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
    number_of_added_slides++;

    var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date() + &quot; presentation copy&quot;);
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    var new_slide = new Object();
    new_slide[&quot;element&quot;] = g;

    // Set build in transition.
    new_slide[&quot;transitionIn&quot;] = new Object();
    var dict = defaultTransitionInDict;
    new_slide[&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
    new_slide[&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

    for (key in dict)
        if (key != &quot;name&quot;)
            new_slide[&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

    // Set build out transition.
    new_slide[&quot;transitionOut&quot;] = new Object();
    dict = defaultTransitionOutDict;
    new_slide[&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
    new_slide[&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

    for (key in dict)
        if (key != &quot;name&quot;)
            new_slide[&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

    // Copy master slide content.
    if (masterSlide)
    {
        var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + Date() + &quot; presentation_copy&quot;);
        clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
        clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
        clonedNode.style.display = &quot;inherit&quot;;

        g.appendChild(clonedNode);
    }

    // Substitute auto texts.
    substituteAutoTexts(g, &quot;Whiteboard &quot; + number_of_added_slides, &quot;W&quot; + number_of_added_slides, slides.length);

    g.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + (after_slide + 1) + &quot;)) { indexSetActiveSlide(&quot; + (after_slide + 1) + &quot;); };&quot;);

    // Create a transform group.
    var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    // Add content to transform group.
    while (g.firstChild)
        transformGroup.appendChild(g.firstChild);

    // Transfer the transform attribute from the node to the transform group.
    if (g.getAttribute(&quot;transform&quot;))
    {
        transformGroup.setAttribute(&quot;transform&quot;, g.getAttribute(&quot;transform&quot;));
        g.removeAttribute(&quot;transform&quot;);
    }

    // Create a view group.
    var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    viewGroup.appendChild(transformGroup);
    new_slide[&quot;viewGroup&quot;] = g.appendChild(viewGroup);

    // Insert background.
    if (BACKGROUND_COLOR != null)
    {
        var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

        rectNode.setAttribute(&quot;x&quot;, 0);
        rectNode.setAttribute(&quot;y&quot;, 0);
        rectNode.setAttribute(&quot;width&quot;, WIDTH);
        rectNode.setAttribute(&quot;height&quot;, HEIGHT);
        rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + Date());
        rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

        new_slide[&quot;viewGroup&quot;].insertBefore(rectNode, new_slide[&quot;viewGroup&quot;].firstChild);
    }

    // Set initial view even if there are no other views.
    var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

    new_slide[&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
    new_slide.initialView = matrixOld.toAttribute();

    // Insert slide
    var node = slides[after_slide][&quot;element&quot;];
    var next_node = node.nextSibling;
    var parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
    g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;Whiteboard &quot; + number_of_added_slides);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date());
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    new_slide[&quot;original_element&quot;] = g;

    node = slides[after_slide][&quot;original_element&quot;];
    next_node = node.nextSibling;
    parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    before_new_slide = slides.slice(0, after_slide + 1);
    after_new_slide = slides.slice(after_slide + 1);
    slides = before_new_slide.concat(new_slide, after_new_slide);

    //resetting the counter attributes on the slides that follow the new slide...
    for (var counter = after_slide+2; counter &lt; slides.length; counter++)
    {
        slides[counter][&quot;element&quot;].setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);
    }
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *    @param mPoints Point matrix.
 *    @return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
    mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

    return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *    @param rect an svg rectangle
 *    @return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
    rectWidth = rect.getBBox().width;
    rectHeight = rect.getBBox().height;
    rectX = rect.getBBox().x;
    rectY = rect.getBBox().y;
    rectXcorr = 0;
    rectYcorr = 0;

    scaleX = WIDTH / rectWidth;
    scaleY = HEIGHT / rectHeight;

    if (scaleX &gt; scaleY)
    {
        scaleX = scaleY;
        rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
        rectWidth = WIDTH / scaleX;
    }
    else
    {
        scaleY = scaleX;
        rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
        rectHeight = HEIGHT / scaleY;
    }

    if (rect.transform.baseVal.numberOfItems &lt; 1)
    {
        mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
    }
    else
    {
        mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
    }

    newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
    newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

    return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *    @param    node    Element node.
 */
function handleElement(node)
{
    if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
    {
        var url;
        var width;
        var height;
        var x;
        var y;
        var transform;

        var tspans = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;tspan&quot;);

        for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
        {
            if (tspans[tspanCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;url&quot;)
            {
                url = tspans[tspanCounter].firstChild.nodeValue;
            }
        }

        var rects = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;rect&quot;);

        for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
        {
            if (rects[rectCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;rect&quot;)
            {
                x = rects[rectCounter].getAttribute(&quot;x&quot;);
                y = rects[rectCounter].getAttribute(&quot;y&quot;);
                width = rects[rectCounter].getAttribute(&quot;width&quot;);
                height = rects[rectCounter].getAttribute(&quot;height&quot;);
                transform = rects[rectCounter].getAttribute(&quot;transform&quot;);
            }
        }

        for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
        {
            if (node.childNodes[childCounter].nodeType == 1)
            {
                if (node.childNodes[childCounter].style)
                {
                    node.childNodes[childCounter].style.display = 'none';
                }
                else
                {
                    node.childNodes[childCounter].setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
                }
            }
        }

        var foreignNode = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;foreignObject&quot;);
        foreignNode.setAttribute(&quot;x&quot;, x);
        foreignNode.setAttribute(&quot;y&quot;, y);
        foreignNode.setAttribute(&quot;width&quot;, width);
        foreignNode.setAttribute(&quot;height&quot;, height);
        foreignNode.setAttribute(&quot;transform&quot;, transform);

        var videoNode = document.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;video&quot;);
        videoNode.setAttribute(&quot;src&quot;, url);

        foreignNode.appendChild(videoNode);
        node.appendChild(foreignNode);
    }
}

/** Class processing the location hash.
 *
 *    @param str location hash
 */
function LocationHash(str)
{
    this.slideNumber = 0;
    this.effectNumber = 0;

    str = str.substr(1, str.length - 1);

    var parts = str.split('_');

    // Try to extract slide number.
    if (parts.length &gt;= 1)
    {
        try
        {
            var slideNumber = parseInt(parts[0]);

            if (!isNaN(slideNumber))
            {
                this.slideNumber = slideNumber - 1;
            }
        }
        catch (e)
        {
        }
    }

    // Try to extract effect number.
    if (parts.length &gt;= 2)
    {
        try
        {
            var effectNumber = parseInt(parts[1]);

            if (!isNaN(effectNumber))
            {
                this.effectNumber = effectNumber;
            }
        }
        catch (e)
        {
        }
    }
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
    this.e11 = 0; // a
    this.e12 = 0; // c
    this.e13 = 0; // e
    this.e21 = 0; // b
    this.e22 = 0; // d
    this.e23 = 0; // f
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 0;
}

/** Constructor function.
 *
 *    @param a element a (i.e. 1, 1) as described in the svg standard.
 *    @param b element b (i.e. 2, 1) as described in the svg standard.
 *    @param c element c (i.e. 1, 2) as described in the svg standard.
 *    @param d element d (i.e. 2, 2) as described in the svg standard.
 *    @param e element e (i.e. 1, 3) as described in the svg standard.
 *    @param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
    this.e11 = a;
    this.e12 = c;
    this.e13 = e;
    this.e21 = b;
    this.e22 = d;
    this.e23 = f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
    this.e11 = m.a;
    this.e12 = m.c;
    this.e13 = m.e;
    this.e21 = m.b;
    this.e22 = m.d;
    this.e23 = m.f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param e11 element 1, 1 of the matrix.
 *    @param e12 element 1, 2 of the matrix.
 *    @param e13 element 1, 3 of the matrix.
 *    @param e21 element 2, 1 of the matrix.
 *    @param e22 element 2, 2 of the matrix.
 *    @param e23 element 2, 3 of the matrix.
 *    @param e31 element 3, 1 of the matrix.
 *    @param e32 element 3, 2 of the matrix.
 *    @param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
    this.e11 = e11;
    this.e12 = e12;
    this.e13 = e13;
    this.e21 = e21;
    this.e22 = e22;
    this.e23 = e23;
    this.e31 = e31;
    this.e32 = e32;
    this.e33 = e33;

    return this;
}

/** Constructor function.
 *
 *    @param attrString string value of the &quot;transform&quot; attribute (currently only &quot;matrix&quot; is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
    str = attrString.substr(7, attrString.length - 8);

    str = str.trim();

    strArray = str.split(&quot;,&quot;);

    // Opera does not use commas to separate the values of the matrix, only spaces.
    if (strArray.length != 6)
        strArray = str.split(&quot; &quot;);

    this.e11 = parseFloat(strArray[0]);
    this.e21 = parseFloat(strArray[1]);
    this.e31 = 0;
    this.e12 = parseFloat(strArray[2]);
    this.e22 = parseFloat(strArray[3]);
    this.e32 = 0;
    this.e13 = parseFloat(strArray[4]);
    this.e23 = parseFloat(strArray[5]);
    this.e33 = 1;

    return this;
}

/** Output function
 *
 *    @return a string that can be used as the &quot;transform&quot; attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
    return &quot;matrix(&quot; + this.e11 + &quot;, &quot; + this.e21 + &quot;, &quot; + this.e12 + &quot;, &quot; + this.e22 + &quot;, &quot; + this.e13 + &quot;, &quot; + this.e23 + &quot;)&quot;;
}

/** Matrix nversion.
 *
 *    @return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
    out = new matrixSVG();

    det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

    out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
    out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
    out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
    out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
    out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
    out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
    out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
    out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
    out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

    return out;
}

/** Matrix multiplication.
 *
 *    @param op another svg matrix
 *    @return this * op
 */
matrixSVG.prototype.mult = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
    out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
    out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
    out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
    out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
    out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
    out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
    out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
    out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

    return out;
}

/** Matrix addition.
 *
 *    @param op another svg matrix
 *    @return this + op
 */
matrixSVG.prototype.add = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 + op.e11;
    out.e12 = this.e12 + op.e12;
    out.e13 = this.e13 + op.e13;
    out.e21 = this.e21 + op.e21;
    out.e22 = this.e22 + op.e22;
    out.e23 = this.e23 + op.e23;
    out.e31 = this.e31 + op.e31;
    out.e32 = this.e32 + op.e32;
    out.e33 = this.e33 + op.e33;

    return out;
}

/** Matrix mixing.
 *
 *    @param op another svg matrix
 *    @parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *    @return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
    contribThis = 1.0 - contribOp;
    out = new matrixSVG();

    out.e11 = contribThis * this.e11 + contribOp * op.e11;
    out.e12 = contribThis * this.e12 + contribOp * op.e12;
    out.e13 = contribThis * this.e13 + contribOp * op.e13;
    out.e21 = contribThis * this.e21 + contribOp * op.e21;
    out.e22 = contribThis * this.e22 + contribOp * op.e22;
    out.e23 = contribThis * this.e23 + contribOp * op.e23;
    out.e31 = contribThis * this.e31 + contribOp * op.e31;
    out.e32 = contribThis * this.e32 + contribOp * op.e32;
    out.e33 = contribThis * this.e33 + contribOp * op.e33;

    return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
    return this.replace(/^\s+|\s+$/g, '');
}

/** SVGElement.getTransformToElement polyfill */
SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {
    return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());
};
</script>
</svg>
